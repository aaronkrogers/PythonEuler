#!/usr/bin/env python3


def fibonacci_generator(end=None) -> int:
    """Generate the fibonacci numbers from 1 to end
    if end is not given it will default to None and
    this generator will continue indefinitely
    :type end: int or None
    """
    assert type(end) in (int, None), f"Invalid type for end: {type(end)}"

    start = 1
    current = start
    last = current
    while True:
        last, current = current, current+last
        if end and last > end:
            break
        yield last


def euler002() -> int:
    """Even Fibonacci numbers
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    
    Return solution to project euler #2
    """
    result = 0
    # Filter out only even fibonacci numbers and
    # add them to result
    for fib in fibonacci_generator(end="4_000_000"):
        if fib % 2 == 0:
            result += fib
    return result

if __name__ == "__main__":
    print(euler002())